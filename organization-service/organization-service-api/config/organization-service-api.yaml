openapi: 3.0.0
info:
  title: Organization Service API
  description: API for Organization
  version: 1.0.0

paths:
  /:
    get:
      summary: Find all Organizations
      operationId: findAll
      tags:
        - organization
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      summary: Add Organization
      operationId: create
      tags:
        - organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /{id}:
    get:
      summary: Find Organization by Id
      operationId: findById
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type : integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /{id}/with-departments:
    get:
      summary: Find Organization by Id with departments
      operationId: findByIdWithDepartments
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /{id}/with-departments-and-employees:
    get:
      summary: Find Organization by Id with departments and employees
      operationId: findByIdWithDepartmentsAndEmployees
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /{id}/with-employees:
    get:
      summary: Find Organization by Id with employees
      operationId: findByIdWithEmployees
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
components:
  securitySchemes:
    BearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    OrganizationDto:
      type: object
      properties:
        address:
          type: string
        departments:
          type: array
          items:
            $ref: '#/definitions/DepartmentDto'
        employees:
          type: array
          items:
            $ref: '#/definitions/EmployeeDto'
        id:
          type: integer
          format: int64
        name:
          type: string
    DepartmentDto:
      type: object
      properties:
        employees:
          type: array
          items:
            $ref: '#/definitions/EmployeeDto'
        id:
          type: integer
          format: int64
        name:
          type: string
        organizationId:
          type: integer
          format: int64
    EmployeeDto:
      type: object
      properties:
        age:
          type: integer
          format: int32
        departmentId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        name:
          type: string
        organizationId:
          type: integer
          format: int64
        position:
          type: string
security:
  - BearerAuth: []
/* tslint:disable */
/* eslint-disable */
/**
 * Gateway Service API
 * API for Gateway
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmployeeDto,
    EmployeeDtoFromJSON,
    EmployeeDtoToJSON,
} from '../models';

export interface AddEmployeeRequest {
    employeeDto: EmployeeDto;
}

export interface FindEmployeeByDepartmentRequest {
    departmentId: number;
}

export interface FindEmployeeByIdRequest {
    id: number;
}

export interface FindEmployeeByOrganizationRequest {
    organizationId: number;
}

/**
 * 
 */
export class EmployeeControllerApi extends runtime.BaseAPI {

    /**
     * Add employee
     */
    async addEmployeeRaw(requestParameters: AddEmployeeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmployeeDto>> {
        if (requestParameters.employeeDto === null || requestParameters.employeeDto === undefined) {
            throw new runtime.RequiredError('employeeDto','Required parameter requestParameters.employeeDto was null or undefined when calling addEmployee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employee/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeDtoToJSON(requestParameters.employeeDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeDtoFromJSON(jsonValue));
    }

    /**
     * Add employee
     */
    async addEmployee(requestParameters: AddEmployeeRequest, initOverrides?: RequestInit): Promise<EmployeeDto> {
        const response = await this.addEmployeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find all employees
     */
    async findAllEmployeesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<EmployeeDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmployeeDtoFromJSON));
    }

    /**
     * Find all employees
     */
    async findAllEmployees(initOverrides?: RequestInit): Promise<Array<EmployeeDto>> {
        const response = await this.findAllEmployeesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Find employee by department
     */
    async findEmployeeByDepartmentRaw(requestParameters: FindEmployeeByDepartmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<EmployeeDto>>> {
        if (requestParameters.departmentId === null || requestParameters.departmentId === undefined) {
            throw new runtime.RequiredError('departmentId','Required parameter requestParameters.departmentId was null or undefined when calling findEmployeeByDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee/department/{departmentId}`.replace(`{${"departmentId"}}`, encodeURIComponent(String(requestParameters.departmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmployeeDtoFromJSON));
    }

    /**
     * Find employee by department
     */
    async findEmployeeByDepartment(requestParameters: FindEmployeeByDepartmentRequest, initOverrides?: RequestInit): Promise<Array<EmployeeDto>> {
        const response = await this.findEmployeeByDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find employee by Id
     */
    async findEmployeeByIdRaw(requestParameters: FindEmployeeByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmployeeDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findEmployeeById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeDtoFromJSON(jsonValue));
    }

    /**
     * Find employee by Id
     */
    async findEmployeeById(requestParameters: FindEmployeeByIdRequest, initOverrides?: RequestInit): Promise<EmployeeDto> {
        const response = await this.findEmployeeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find employee by organization
     */
    async findEmployeeByOrganizationRaw(requestParameters: FindEmployeeByOrganizationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<EmployeeDto>>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling findEmployeeByOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee/organization/{organizationId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmployeeDtoFromJSON));
    }

    /**
     * Find employee by organization
     */
    async findEmployeeByOrganization(requestParameters: FindEmployeeByOrganizationRequest, initOverrides?: RequestInit): Promise<Array<EmployeeDto>> {
        const response = await this.findEmployeeByOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

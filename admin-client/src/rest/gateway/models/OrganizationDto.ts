/* tslint:disable */
/* eslint-disable */
/**
 * Gateway Service API
 * API for Gateway
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DepartmentDto,
    DepartmentDtoFromJSON,
    DepartmentDtoFromJSONTyped,
    DepartmentDtoToJSON,
} from './DepartmentDto';
import {
    EmployeeDto,
    EmployeeDtoFromJSON,
    EmployeeDtoFromJSONTyped,
    EmployeeDtoToJSON,
} from './EmployeeDto';

/**
 * 
 * @export
 * @interface OrganizationDto
 */
export interface OrganizationDto {
    /**
     * 
     * @type {string}
     * @memberof OrganizationDto
     */
    address?: string;
    /**
     * 
     * @type {Array<DepartmentDto>}
     * @memberof OrganizationDto
     */
    departments?: Array<DepartmentDto>;
    /**
     * 
     * @type {Array<EmployeeDto>}
     * @memberof OrganizationDto
     */
    employees?: Array<EmployeeDto>;
    /**
     * 
     * @type {number}
     * @memberof OrganizationDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDto
     */
    name?: string;
}

export function OrganizationDtoFromJSON(json: any): OrganizationDto {
    return OrganizationDtoFromJSONTyped(json, false);
}

export function OrganizationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : json['address'],
        'departments': !exists(json, 'departments') ? undefined : ((json['departments'] as Array<any>).map(DepartmentDtoFromJSON)),
        'employees': !exists(json, 'employees') ? undefined : ((json['employees'] as Array<any>).map(EmployeeDtoFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function OrganizationDtoToJSON(value?: OrganizationDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'departments': value.departments === undefined ? undefined : ((value.departments as Array<any>).map(DepartmentDtoToJSON)),
        'employees': value.employees === undefined ? undefined : ((value.employees as Array<any>).map(EmployeeDtoToJSON)),
        'id': value.id,
        'name': value.name,
    };
}

